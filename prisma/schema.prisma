generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  email            String           @unique
  password         String
  role             UserRole
  fcmToken         String?          @default("")
  isDeleted        Boolean          @default(false)
  completedProfile Boolean          @default(false)
  expirationOtp    DateTime?
  otp              Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Client           Client?
  ServiceProvider  ServiceProvider?
  Employ           Employ?
  ServiceRating    ServiceRating[]
  ClientProject    ClientProject[]

  @@map("Users")
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  location  String
  gender    Gender
  age       Int
  image     String?  @default("")
  about     String?  @default("")
  let       Float
  lan       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("Client")
}

model Employ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  location  String
  image     String?  @default("")
  about     String?  @default("")
  let       Float
  lan       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("Employ")
}

model ServiceProvider {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  location         String
  gender           Gender
  age              Int
  exprience        Int
  expertise        Category[]
  mobile           String
  image            String?            @default("")
  about            String?            @default("")
  let              Float
  lan              Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String             @unique @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  ServiceRating    ServiceRating[]
  ProjectApplicants ProjectApplicants[]

  @@map("Service-Provider")
}

model ClientProject {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  date              DateTime
  time              String
  priceRange        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  category          Category
  status            Status              @default(ONGOING)
  userId            String              @db.ObjectId
  user              User                @relation(fields: [userId], references: [id])
  ProjectApplicants ProjectApplicants[]

  @@map("Client-Projects")
}

model ProjectApplicants {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  bidPrice          Float
  status            BidStatus       @default(PENDING)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  clientProjectId   String          @db.ObjectId
  serviceProviderId String          @db.ObjectId
  clientProject     ClientProject   @relation(fields: [clientProjectId], references: [id])
  ServiceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  @@map("Project-Applicants")
}

model ServiceRating {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  rating            Int
  serviceProviderId String          @db.ObjectId
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  userId            String          @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])

  @@map("Service-Rating")
}

enum UserRole {
  ADMIN
  CLIENT
  SERVICE_PROVIDER
  EMPLOYER
  CONCIERGE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Category {
  CLEANING
  ELECTRICIAN
  DRIVING
  PLUMBING
  MOVING
  PAINTING
  FARNITURE
  LANDSCAPE
  OTHERS
}

enum Status {
  ONGOING
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}
