generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  email           String            @unique
  password        String
  role            UserRole
  fcmToken        String?           @default("")
  isDeleted       Boolean           @default(false)
  expirationOtp   DateTime?
  otp             Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Client          Client[]
  ServiceProvider ServiceProvider[]
  Employ          Employ[]
  ServiceRating   ServiceRating[]

  @@map("Users")
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  location  String
  gender    Gender
  age       Int
  image     String?  @default("")
  about     String?  @default("")
  let       Float
  lan       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("Client")
}

model Employ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  location  String
  image     String?  @default("")
  about     String?  @default("")
  let       Float
  lan       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("Employ")
}

model ServiceProvider {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  location      String
  gender        Gender
  age           Int
  exprience     Int
  expertise     String
  mobile        String
  image         String?         @default("")
  about         String?         @default("")
  let           Float
  lan           Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  ServiceRating ServiceRating[]

  @@map("Service-Provider")
}

model ServiceRating {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  rating            Int
  serviceProviderId String          @db.ObjectId
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  userId            String          @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])

  @@map("Service-Rating")
}

enum UserRole {
  ADMIN
  CLIENT
  SERVICE_PROVIDER
  EMPLOYER
  CONCIERGE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  IN_RELATIONSHIP
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum FlagType {
  RED
  GREEN
  YELLOW
}
